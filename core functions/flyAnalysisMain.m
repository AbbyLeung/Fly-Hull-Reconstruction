%--------------------------------------------------------------------------
% MAIN FUNCTION FOR SINGLE MOVIE FLY ANALYSIS.
%
% This function performs analysis on the three raw cine files from the high
% speed cameras to generate a voxel reconstruction along with estimates for
% vectors/angles that describe the fly's position and orientation
% throughout the movie. Previous versions were called 'runManyAnalyses*.m'
%
%   INPUTS:
%       -MovNum = number for the current set of cine files (double)
%       -ExprNum = number indicating current experiment (double)
%       -pathStruct = structure generated by the generatePathStruct.m
%       function that contains information about the directory structure of
%       the data output
%       -clustFlag = boolean value to indicate whether or not to run the
%       analysis on a local cluster to speed up computing
%   OUTPUTS:
%       -data = structure containing the results of the hull reconstruction
%       analysis
%--------------------------------------------------------------------------
function data = flyAnalysisMain(MovNum, ExprNum, pathStruct, clustFlag)
%--------------------------------------------------------------------------
%% inputs and parameters
if ~exist('clustFlag','var')
    clustFlag = false ;
end

% these will be updated later depending on whether or not an error or false
% trigger occurs
falseTriggerFlag = false ;
errorFlag = false ;

% should we use calculations for extreme perturbations?
largePertFlag = true ; 

% make and/or save figures?
plotHullFlag = false ; 
saveHullFigFlag = false ; 

% save analysis bits along the way?
savePointFlag = true ; 

% root path to data directory
rootPath = pathStruct.root ;

% indexing for cameras
XZ = 2 ;
XY = 3 ;
YZ = 1 ;

% these are really artifacts of old code. can be manually updated, but in
% general can be left alone
twoFlies_xy = 0 ; % if ~= 0, this allows user to crop other flies out of movie
twoFlies_xz = 0 ;
twoFlies_yz = 0 ;

% time when the fly is visible in all 3 views, in units of frame number
tin = nan ;
tout = nan ;
%--------------------------------------------------------------------------
%% sort out paths for saving, calibration data, etc.
movNumStr = num2str(MovNum,'%03d') ;
dataPath = rootPath ;

savePath = pathStruct.save ;
calibrationPath = pathStruct.calibration ;
errorPath = [rootPath 'errorlog.txt'] ;
possibleFTPath = pathStruct.possibleFT ;

% get names for cine and xml (meta data) files
cinFilenames = cell(1,3) ;
cinFilenames{XY} = [dataPath strcat('\xy_',movNumStr,'.cin')] ;
cinFilenames{XZ} = [dataPath strcat('\xz_',movNumStr,'.cin')] ;
cinFilenames{YZ} = [dataPath strcat('\yz_',movNumStr,'.cin')] ;
xmlFilenames = cell(1,3) ;
xmlFilenames{XY} = [dataPath strcat('\xy_',movNumStr,'.xml')] ;
xmlFilenames{XZ} = [dataPath strcat('\xz_',movNumStr,'.xml')] ;
xmlFilenames{YZ} = [dataPath strcat('\yz_',movNumStr,'.xml')] ;

% create folder for analysis results of current movie
prefixStr = ['Expr_' num2str(ExprNum) '_mov_' movNumStr ];
resultsPath = fullfile(savePath, prefixStr) ;
mkdir(resultsPath) ;

% create folder for hull reconstruction figures, if generating them
hullFigPath = fullfile(resultsPath,'figs') ; 
mkdir(hullFigPath);

% define paths for camera calibration data
DLT_matrix_CSV_filename = [calibrationPath '\calibration_dltCoefs.csv'] ;
easyWandData_filename = [calibrationPath '\calibration_easyWandData.mat'] ;

% load calibration data
dlt_matrix = load(DLT_matrix_CSV_filename) ; % CSV
load(easyWandData_filename); % contains easyWandData
set(0, 'ShowHiddenHandles', 'on')
close 'easyWand 5'

% define filename to save results to
resultsFileName = [prefixStr '_results'] ;

%--------------------------------------------------------------------------
%% run full analysis
try
    % main analysis script
    if clustFlag
        run flyAnalysisScriptClust
    else
        run flyAnalysisScript
    end
    
    % if false trigger is detected (i.e. no flies in view):
    if falseTriggerFlag
        %moves false trigger files into corresponding analysis folder
        movefile(resultsPath, possibleFTPath) ;
        movefile(cinFilenames{XY}, fullfile(possibleFTPath, prefixStr)) ;
        movefile(cinFilenames{XZ}, fullfile(possibleFTPath, prefixStr)) ;
        movefile(cinFilenames{YZ}, fullfile(possibleFTPath, prefixStr)) ;
        movefile(xmlFilenames{XY}, fullfile(possibleFTPath, prefixStr)) ;
        movefile(xmlFilenames{XZ}, fullfile(possibleFTPath, prefixStr)) ;
        movefile(xmlFilenames{YZ}, fullfile(possibleFTPath, prefixStr)) ;
        close all ;
        data = struct() ; 
        return ; %continue
    elseif errorFlag
        data = struct() ; 
        return ; %continue
    else
        % otherwise calculate euler angles 
        data = estimateFlyAngles(ExprNum, MovNum, savePath, largePertFlag) ; 
    end

% if we reach this point, an error was thrown, and we can try to note it
catch exception
    % print out error message
    disp(getReport(exception, 'basic'))
    %cd ..
    diary off
    %{
    try
        rmdir(prefixStr,'s')
    catch
        disp(['Could not delete ' prefixStr]) ;
    end
    %}
    data = struct() ;
    return ;
    
end

close all
%--------------------------------------------------------------------------
%% try to guess perturbation type (under construction)
%{
try
    run guessPerturbation_mk2
catch
    pertStr = 'Error' ;
end
pertLogChange = strcat(num2str(MovNum), pertStr) ;
fileID = fopen(strcat(savePath,'\','pertLog.txt'),'a+') ;
fprintf(fileID, '%s\r\n', pertLogChange) ;
fclose(fileID) ;
%}
%--------------------------------------------------------------------------
%% move analysis folder to appropriate directory
movefile(resultsPath, pathStruct.unsorted) ;


end