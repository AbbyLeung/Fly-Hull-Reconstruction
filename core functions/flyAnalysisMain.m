%--------------------------------------------------------------------------
% MAIN FUNCTION FOR SINGLE MOVIE FLY ANALYSIS.
%
% This function performs analysis on the three raw cine files from the high
% speed cameras to generate a voxel reconstruction along with estimates for
% vectors/angles that describe the fly's position and orientation
% throughout the movie. Previous versions were called 'runManyAnalyses*.m'
%
%   INPUTS:
%       -MovNum = number for the current set of cine files (double)
%       -ExprNum = number indicating current experiment (double)
%       -pathStruct = structure generated by the generatePathStruct.m
%       function that contains information about the directory structure of
%       the data output
%       -clustFlag = boolean value to indicate whether or not to run the
%       analysis on a local cluster to speed up computing
%   OUTPUTS:
%       -data = structure containing the results of the hull reconstruction
%       analysis
%--------------------------------------------------------------------------
function data = flyAnalysisMain(MovNum, ExprNum, pathStruct, clustFlag, ...
    largePertFlag, removeLegsFlag, stopWingsFlag, samReconFlag)
%--------------------------------------------------------------------------
%% inputs and parameters
% which vertsion of analysis script to run
if ~exist('clustFlag','var') || isempty(clustFlag)
    clustFlag = false ;
end
% should we use calculations for extreme perturbations?
if ~exist('largePertFlag','var') || isempty(largePertFlag)
    largePertFlag = false ;
end
% should we remove the legs when using binary threshold (could affect the
% correspondence between extremal points in different views of the fly)
if ~exist('removeLegsFlag','var') || isempty(removeLegsFlag)
    removeLegsFlag = true ;
end
% should we use calculations for cases where wings stop moving?
% (if not, then e.g. i2 activation can mess up binaryThreshold)
if ~exist('stopWingsFlag','var') || isempty(stopWingsFlag)
    stopWingsFlag = false ;
end
% should we use newer (less tested) version of hull reconstruction?
if ~exist('samReconFlag','var') || isempty(samReconFlag)
    samReconFlag = false ;
end

tic
% try to align images to avoid clipping?
alignBBoxFlag = false ; 

% these will be updated later depending on whether or not an error or false
% trigger occurs
falseTriggerFlag = false ;
errorFlag = false ;

% make and/or save figures?
plotHullFlag = false ; 
saveHullFigFlag = false ; 

% save analysis bits along the way?
savePointFlag = false ; 

% root path to data directory
rootPath = pathStruct.root ;

% indexing for cameras
XZ = 2 ;
XY = 3 ;
YZ = 1 ;

% these are really artifacts of old code. can be manually updated, but in
% general can be left alone
twoFlies_xy = 0 ; % if ~= 0, this allows user to crop other flies out of movie
twoFlies_xz = 0 ;
twoFlies_yz = 0 ;

% time when the fly is visible in all 3 views, in units of frame number
tin = nan ;
tout = nan ;
%--------------------------------------------------------------------------
%% sort out paths for saving, calibration data, etc.
movNumStr = num2str(MovNum,'%03d') ;
dataPath = rootPath ;

savePath = pathStruct.save ;
calibrationPath = pathStruct.calibration ;
errorPath = [rootPath 'errorlog.txt'] ;
possibleFTPath = pathStruct.possibleFT ;

% -----------------------------------------------------------
% get names for cine and xml (meta data) files
cDir = dir(fullfile(dataPath, ['*_' movNumStr '.cin*'])) ; 
xDir = dir(fullfile(dataPath, ['*_' movNumStr '.xml'])) ; 

% check to make sure that files exist
if (length(cDir) < 3)
    fprintf('Could not find movie files for %s -- skipping \n', movNumStr)
    data = struct() ; 
    return
end
% initialize cell arrays to store cine and xml file names
cinFilenames = cell(1,3) ;
xmlFilenames = cell(1,3) ;
cam_prefixes = {'yz', 'xz', 'xy'} ; 

% loop over cameras to fill cell arrays
for camNum = [XY, XZ, YZ]
    % index and filename for movie
    c_ind = contains({cDir.name}, cam_prefixes{camNum}) ; 
    cinFilenames{camNum} = fullfile(cDir(c_ind).folder, cDir(c_ind).name) ; %[dataPath strcat('\xy_',movNumStr, movFileExt)] ;
    
    % index and filename for xml
    x_ind = contains({xDir.name}, cam_prefixes{camNum}) ; 
    xmlFilenames{camNum} = fullfile(xDir(x_ind).folder, xDir(x_ind).name) ;
end

% ------------------------------------------------------------
% create folder for analysis results of current movie
prefixStr = ['Expr_' num2str(ExprNum) '_mov_' movNumStr ];
resultsPath = fullfile(savePath, prefixStr) ;
mkdir(resultsPath) ;

% create folder for hull reconstruction figures, if generating them
hullFigPath = fullfile(resultsPath,'figs') ; 
mkdir(hullFigPath);

% define paths for camera calibration data
DLT_matrix_CSV_filename = fullfile(calibrationPath,...
    'calibration_dltCoefs.csv') ;
easyWandData_filename = fullfile(calibrationPath,...
    'calibration_easyWandData.mat') ;

% load calibration data
try
    dlt_matrix = load(DLT_matrix_CSV_filename) ; % CSV
    load(easyWandData_filename); % contains easyWandData
catch exception
    disp(getReport(exception, 'basic')) 
end

% try to delete easyWand window if it pops up
set(0, 'ShowHiddenHandles', 'on')
try
    close 'easyWand 5'
catch
    disp('No easy wand window')
end

% define filename to save results to
resultsFileName = [prefixStr '_results'] ;

% % ------------------------------------------
% %% start parallel pool
% if max(size(gcp)) == 0 % parallel pool needed
%     parpool % create the parallel pool
% end

%--------------------------------------------------------------------------
%% run full analysis
try
    % main analysis script
    if samReconFlag
        run flyAnalysisScriptSam
    else
        if clustFlag
            run flyAnalysisScriptClust
            % run flyAnalysisScriptClustPool
        else
            run flyAnalysisScript
        end
    end
    
    % if false trigger is detected (i.e. no flies in view):
    if falseTriggerFlag
        %moves false trigger files into corresponding analysis folder
        movefile(resultsPath, possibleFTPath) ;
        movefile(cinFilenames{XY}, fullfile(possibleFTPath, prefixStr)) ;
        movefile(cinFilenames{XZ}, fullfile(possibleFTPath, prefixStr)) ;
        movefile(cinFilenames{YZ}, fullfile(possibleFTPath, prefixStr)) ;
        movefile(xmlFilenames{XY}, fullfile(possibleFTPath, prefixStr)) ;
        movefile(xmlFilenames{XZ}, fullfile(possibleFTPath, prefixStr)) ;
        movefile(xmlFilenames{YZ}, fullfile(possibleFTPath, prefixStr)) ;
        close all ;
        data = struct() ; 
        return ; %continue
    elseif errorFlag
        data = struct() ; 
        return ; %continue
    else
        % otherwise calculate euler angles 
        data = estimateFlyAngles(ExprNum, MovNum, savePath, largePertFlag) ; 
    end

% if we reach this point, an error was thrown, and we can try to note it
catch exception
    % print out error message
    disp(getReport(exception, 'basic'))
    %cd ..
    diary off
    %{
    try
        rmdir(prefixStr,'s')
    catch
        disp(['Could not delete ' prefixStr]) ;
    end
    %}
    data = struct() ;
    return ;
    
end

close all
%--------------------------------------------------------------------------
%% try to guess perturbation type (under construction)
%{
try
    run guessPerturbation_mk2
catch
    pertStr = 'Error' ;
end
pertLogChange = strcat(num2str(MovNum), pertStr) ;
fileID = fopen(strcat(savePath,'\','pertLog.txt'),'a+') ;
fprintf(fileID, '%s\r\n', pertLogChange) ;
fclose(fileID) ;
%}
%--------------------------------------------------------------------------
%% move analysis folder to appropriate directory
movefile(resultsPath, pathStruct.unsorted) ;

toc
end