% -------------------------------------------------------------------------
% function to calculate estimates of torques generated by quasi steady
% forces NB: this only applies to a single wing, so needs to be run twice
% to get full torque prediction
%
% INPUTS: 
%   -qs_force_struct: structure containing information on quasi-steady
%     forces, generated by 'quasiSteadyForceAll.m'. 
%  
% OUTPUTS:
%   -qs_force_struct: same structure as above with extra torque info added
%
% TO DO:
%   - Add passive damping?
% -------------------------------------------------------------------------
function qs_force_struct = quasiSteadyTorque(qs_force_struct, plotFlag)
% -------------------------------------
%% inputs and params
if ~exist('plotFlag','var') || isempty(plotFlag)
    plotFlag = false ; 
end

% general params
params = qs_force_struct.params ; 
span = params.span ; 
body_mass = params.body_mass ;
g = params.g ;
hinge_vec = params.hinge_vec ; 
beta_0 = params.beta_0 ;
M2 = eulerRotationMatrix(0, -1*beta_0, 0) ; % matrix to rotate body from x-axis to resting pitch angle

% wing location and force vectors
spanHat = qs_force_struct.spanHat ; % span direction
F_tot = qs_force_struct.F_tot ; % total force
N_frames = size(spanHat, 1) ; 

% -------------------------------------------
%% calculate torque
% get wing center of pressure position
CoP = (0.7*span).*spanHat ; % 70 percent along span of wing, as per Dickinson
CoP = (M2'*CoP')' ; % transform to body frame coordinates

% use estimate of "hinge vector" (estimate of vector between body CM and
% wing hinge) to modify CoM, so that body CM is origin of our coordinate
% system
CoP = bsxfun(@plus,CoP , hinge_vec') ; 

% take cross product with force
torque = cross(CoP, F_tot, 2) ; 

% hat vectors for torque directions
roll_hat = M2*[1; 0; 0] ; %M2*
pitch_hat = [0; 1; 0] ; 
yaw_hat = [0 ; 0; 1] ; 
% -------------------------------------------
%% add torque data to struct
qs_force_struct.CoP     = CoP ; 
qs_force_struct.T_tot  = torque ; 

qs_force_struct.roll_hat  = roll_hat ; 
qs_force_struct.pitch_hat = pitch_hat ; 
qs_force_struct.yaw_hat   = yaw_hat ; 

% -------------------------------------------
%% plot results to debug?
if plotFlag
   y_label_list = {'T_{roll}', 'T_{pitch}', 'T_{yaw}'} ;  
   hat_vec_list = {roll_hat, pitch_hat, yaw_hat} ; 
   t = qs_force_struct.t ; 
   norm_factor = g*body_mass*span ;
   
   figure ; 
   for i = 1:3
       hat_vec_curr = hat_vec_list{i}' ; 
       T_curr = dot(torque, repmat(hat_vec_curr, N_frames,1), 2) ; 
       subplot(3,1,i)
       hold on
       plot([t(1), t(end)], (nanmean(T_curr)./norm_factor).*[1, 1], 'b:')
       plot(t, T_curr./norm_factor,'k-') ; 
       
       axis tight
       ylabel(y_label_list{i})
   end
end

end